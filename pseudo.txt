Function Sat2Solver(n_vars):
    n_vertices ← 2 * n_vars
    adj_list ← empty adjacency list of size n_vertices
    adj_list_r ← empty adjacency list of size n_vertices (for reverse graph)
    order ← empty list
    visited ← array of size n_vertices, initialized to FALSE
    component ← array of size n_vertices, initialized to -1
    assignment ← array of size n_vars, initialized to FALSE

Function get_literal(var, sign):
    Return (2 * var) XOR sign   // Converts variable and sign to graph index

Function add_disjunction(var1, sign1, var2, sign2):
    u ← get_literal(var1, sign1)   // Convert first variable to graph index
    v ← get_literal(var2, sign2)   // Convert second variable to graph index
    not_u ← u XOR 1                // Get negation of u
    not_v ← v XOR 1                // Get negation of v

    Append v to adj_list[not_u]    // ¬u → v
    Append u to adj_list[not_v]    // ¬v → u
    Append not_u to adj_list_r[v]  // Reverse graph for SCC
    Append not_v to adj_list_r[u]

Function dfs1(node):
    visited[node] ← TRUE
    For each neighbor in adj_list[node]:
        If not visited[neighbor]:
            dfs1(neighbor)
    Append node to order

Function dfs2(node, comp_id):
    component[node] ← comp_id
    For each neighbor in adj_list_r[node]:
        If component[neighbor] is -1:
            dfs2(neighbor, comp_id)

Function solve():
    order.clear()
    visited.fill(FALSE)

    // First DFS to generate postorder sequence
    For i from 0 to n_vertices - 1:
        If not visited[i]:
            dfs1(i)

    // Second DFS to find SCCs
    component.fill(-1)
    comp_id ← 0
    For i from size(order) - 1 down to 0:
        node ← order[i]
        If component[node] is -1:
            dfs2(node, comp_id)
            comp_id ← comp_id + 1

    // Determine satisfiability
    assignment.fill(FALSE)
    For i from 0 to n_vars - 1:
        If component[2 * i] = component[2 * i + 1]:
            Return FALSE  // Unsatisfiable
        assignment[i] ← (component[2 * i] > component[2 * i + 1])

    Return TRUE  // Satisfiable
